<?php
namespace {{ namespace }};

use {{ namespacedModel }};
use {{ rootNamespace }}Http\Controllers\Controller;
use {{ namespacedRequests }}
use Illuminate\Http\Response;
use App\Http\Requests\PaginatedRequest;
use Illuminate\Validation\ValidationException;

/**
 * Class {{ class }}
 * @package  {{ namespace }}
 */
class {{ class }} extends Controller
{
    /**
     * @OA\Get(
     *  operationId="index{{ model }}",
     *  path="/{{ modelVariable }}",
     *  security={ { "BearerAuth": {} } },
     *  tags={"{{ model }}s"},
     *  summary="Get list of {{ model }}",
     *  description="Returns list of {{ model }}",
     *  @OA\Parameter(ref="#/components/parameters/page"),
     *  @OA\Parameter(ref="#/components/parameters/per_page"),
     *  @OA\Response(response=200, description="Successful operation",
     *    @OA\JsonContent(ref="#/components/schemas/{{ model }}sPaginated"),
     *  ),
     * )
     *
     * Display a listing of {{ model }}.
     * @return JsonResponse
     */
    public function index(PaginatedRequest $request)
    {
        $validated = $request->validated();
        $query = {{ model }}::query();
        $result = $query->paginate($validated['per_page']);
        $pagesCount = $result->lastPage();

        if ($validated['page'] > $pagesCount) {
            throw ValidationException::withMessages(['page' => "Page Out of Range"]);
        }

        return response()->json($result);
    }

    /**
     * @OA\Post(
     *  operationId="store{{ model }}",
     *  path="/{{ modelVariable }}",
     *  security={ { "BearerAuth": {} } },
     *  summary="Insert a new {{ model }}",
     *  description="Insert a new {{ model }}",
     *  tags={"{{ model }}s"},
     *  @OA\RequestBody(
     *    description="{{ model }} to create",
     *    required=true,
     *    @OA\MediaType(
     *      mediaType="application/json",
     *      @OA\Schema(
     *      ref="#/components/schemas/{{ model }}"
     *     )
     *    )
     *  ),
     *  @OA\Response(response="201",description="{{ model }} created",
     *     @OA\JsonContent(ref="#/components/schemas/{{ model }}"),
     *  ),
     *  @OA\Response(response=422,description="Validation exception"),
     * )
     *
     * @param {{ model }}Request $request
     * @return JsonResponse
     */
    public function store({{ storeRequest }} $request)
    {
        $input = $request->validated();
        $data = {{ model }}::create($input);
        return response()->json($data, RESPONSE::HTTP_CREATED);
    }

    /**
     * @OA\Get(
     *   path="/{{ modelVariable }}/{{{ modelVariable }}_id}",
     *   summary="Show a {{ model }} from his Id",
     *   description="Show a {{ model }} from his Id",
     *   security={ { "BearerAuth": {} } },
     *   operationId="show{{ model }}",
     *   tags={"{{ model }}s"},
     *   @OA\Parameter(ref="#/components/parameters/{{ model }}--id"),
     *   @OA\Response(response=200,description="Successful operation",
     *     @OA\JsonContent(ref="#/components/schemas/{{ model }}"),
     *   ),
     *   @OA\Response(response="404",description="{{ model }} not found"),
     * )
     *
     * @param {{ model }} ${{ model }}
     * @return JsonResponse
     */
    public function show({{ model }} ${{ modelVariable }})
    {
        return response()->json(${{ modelVariable }});
    }

    /**
     * @OA\Patch(
     *   operationId="update{{ model }}",
     *   summary="Update an existing {{ model }}",
     *   description="Update an existing {{ model }}",
     *   security={ { "BearerAuth": {} } },
     *   tags={"{{ model }}s"},
     *   path="/{{ modelVariable }}/{{{ modelVariable }}_id}",
     *   @OA\Parameter(ref="#/components/parameters/{{ model }}--id"),
     *   @OA\Response(response="204",description="No content"),
     *   @OA\RequestBody(
     *     description="{{ model }} to update",
     *     required=true,
     *     @OA\MediaType(
     *       mediaType="application/json",
     *       @OA\Schema(ref="#/components/schemas/{{ model }}")
     *     )
     *   )
     * )
     *
     * @param Request $request
     * @param {{ model }} ${{ model }}
     * @return Response|JsonResponse
     */
    public function update({{ updateRequest }} $request, {{ model }} ${{ modelVariable }})
    {
        ${{ modelVariable }}->update($request->validated());
        return response()->noContent();
    }

    /**
     * @OA\Delete(
     *  path="/{{ modelVariable }}/{{{ modelVariable }}_id}",
     *  summary="Delete a {{ model }}",
     *  description="Delete a {{ model }}",
     *  security={ { "BearerAuth": {} } },
     *  operationId="destroy{{ model }}",
     *  tags={"{{ model }}s"},
     *  @OA\Parameter(ref="#/components/parameters/{{ model }}--id"),
     *  @OA\Response(response=204,description="No content"),
     *  @OA\Response(response=404,description="{{ model }} not found"),
     * )
     *
     * @param {{ model }} ${{ model }}
     * @return Response|JsonResponse
     */
    public function destroy({{ model }} ${{ modelVariable }})
    {
        ${{ modelVariable }}->delete();
        return response()->noContent();
    }
}
